//Time O(N). Space :O(N)
vector<int> Solution::preorderTraversal(TreeNode* A) {
    vector<int> result;
    if(!A)
    return result;
    
    stack<TreeNode*> st;
    
    st.push(A);
    while(!st.empty())
    {
        TreeNode* node=st.top();
        st.pop();
        result.push_back(node->val);
        
        if(node->right)
        st.push(node->right);
        
        if(node->left)
        st.push(node->left);
    }
    return result;
}


//Morris Traversal. Time :O(N).  Space O(1)
vector<int> Solution::preorderTraversal(TreeNode* A) {
   vector<int> result;
   TreeNode * curr=A;
   while(curr)
   {
       if(curr->left==NULL)
       {
           result.push_back(curr->val);
           curr=curr->right;
       }
       else
       {
           TreeNode *prev=curr->left;
           while(prev->right&&prev->right!=curr)
           {
               prev=prev->right;
           }
           
           
           if(prev->right==NULL)
           {
               result.push_back(curr->val);
               prev->right=curr;
               curr=curr->left;
           }
           else{
               prev->right=NULL;
               curr=curr->right;
           }
       }
   }
   return result;
}
